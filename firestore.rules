rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * 自身のファイルの場合のみ許可
     */
    function isOwnResource(uid) {
      return (request.auth != null && uid == request.auth.uid);
    }
    /**
     * CreateリクエストのAccountデータが正しい場合は許可
     */
    function isValidCreatingAccount() {
      return (
        // フィールドチェック
        request.resource.data.keys().hasAll(['uid', 'displayName', 'status', 'createdAt', 'updatedAt'])
        // uidフィールドの値チェック
        && request.resource.data.uid == request.auth.uid
        // displayNameフィールドの型と値チェック
        && request.resource.data.displayName is string && request.resource.data.displayName.size() <= 20
        // statusフィールドの値チェック
        && request.resource.data.status == 'active'
        // createdAtフィールドの型チェック
        && request.resource.data.createdAt is timestamp
        // updatedAtフィールドの型チェック
        && request.resource.data.updatedAt is timestamp
      );
    }
    /**
     * UpdateリクエストのAccountデータが正しい場合は許可
     */
    function isValidUpdatingAccount() {
      return (
        // updatedAtフィールドがあるかのチェック (必須)
        request.resource.data.keys().hasAll(['updatedAt'])
        // displayNameフィールドの型と値チェック
        && request.resource.data.displayName is string && request.resource.data.displayName.size() <= 20
        // updatedAtフィールドの型チェック
        && request.resource.data.updatedAt is timestamp
      );
    }

    match /NotaApp/v0 {
      /**
       * Accountコレクション
       */
      match /Account/{docId} {
        allow get: if resource.data.status == 'active';
        allow list: if resource.data.status == 'active';
        allow create: if isOwnResource(docId) && isValidCreatingAccount();
        allow update: if isOwnResource(docId) && isValidUpdatingAccount();
        allow delete: if false;
      }
    }
  }
}
